// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Training_app_API.Data;

#nullable disable

namespace Training_app_API.Migrations
{
    [DbContext(typeof(Training_app_APIContext))]
    partial class Training_app_APIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Training_app_API.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseId");

                    b.ToTable("Exercise");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            Description = "Lyft upp, ställ ner, etc etc",
                            Instruction = "Akta ryggen",
                            Name = "Marklyft"
                        },
                        new
                        {
                            ExerciseId = 2,
                            Description = "Tryck upp, Sänk, etc etc",
                            Instruction = "Akta Axlarna",
                            Name = "Bänkpress"
                        },
                        new
                        {
                            ExerciseId = 3,
                            Description = "Pressa upp, Sänk, etc etc",
                            Instruction = "Akta Axlar",
                            Name = "Knäböj"
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.ExerciseMuscleGroup", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("MuscleGroupId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "MuscleGroupId");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("ExerciseMuscleGroup");
                });

            modelBuilder.Entity("Training_app_API.Models.ExerciseTool", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "ToolId");

                    b.HasIndex("ToolId");

                    b.ToTable("ExerciseTool");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            ToolId = 2
                        },
                        new
                        {
                            ExerciseId = 2,
                            ToolId = 2
                        },
                        new
                        {
                            ExerciseId = 3,
                            ToolId = 2
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.ExerciseTrainingType", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingTypeId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "TrainingTypeId");

                    b.HasIndex("TrainingTypeId");

                    b.ToTable("ExerciseTrainingType");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            TrainingTypeId = 1
                        },
                        new
                        {
                            ExerciseId = 1,
                            TrainingTypeId = 4
                        },
                        new
                        {
                            ExerciseId = 2,
                            TrainingTypeId = 2
                        },
                        new
                        {
                            ExerciseId = 2,
                            TrainingTypeId = 4
                        },
                        new
                        {
                            ExerciseId = 3,
                            TrainingTypeId = 1
                        },
                        new
                        {
                            ExerciseId = 3,
                            TrainingTypeId = 4
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.ExerciseVenue", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "VenueId");

                    b.HasIndex("VenueId");

                    b.ToTable("ExerciseVenue");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            VenueId = 1
                        },
                        new
                        {
                            ExerciseId = 2,
                            VenueId = 1
                        },
                        new
                        {
                            ExerciseId = 3,
                            VenueId = 1
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.MuscleGroup", b =>
                {
                    b.Property<int>("MuscleGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MuscleGroupId"), 1L, 1);

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MuscleGroupId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("MuscleGroup");

                    b.HasData(
                        new
                        {
                            MuscleGroupId = 1,
                            Name = "Rygg"
                        },
                        new
                        {
                            MuscleGroupId = 2,
                            Name = "Ben"
                        },
                        new
                        {
                            MuscleGroupId = 3,
                            Name = "Mage"
                        },
                        new
                        {
                            MuscleGroupId = 4,
                            Name = "Bröst"
                        },
                        new
                        {
                            MuscleGroupId = 5,
                            Name = "Triceps"
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.Tool", b =>
                {
                    b.Property<int>("ToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToolId"), 1L, 1);

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ToolId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("UserId");

                    b.ToTable("Tool");

                    b.HasData(
                        new
                        {
                            ToolId = 1,
                            Name = "Hantlar"
                        },
                        new
                        {
                            ToolId = 2,
                            Name = "Skivstång"
                        },
                        new
                        {
                            ToolId = 3,
                            Name = "Maskin"
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.TrainingType", b =>
                {
                    b.Property<int>("TrainingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingTypeId"), 1L, 1);

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingTypeId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("TrainingType");

                    b.HasData(
                        new
                        {
                            TrainingTypeId = 1,
                            Name = "Styrketräning"
                        },
                        new
                        {
                            TrainingTypeId = 2,
                            Name = "Funktionell"
                        },
                        new
                        {
                            TrainingTypeId = 3,
                            Name = "Kondition"
                        },
                        new
                        {
                            TrainingTypeId = 4,
                            Name = "Flexibilitet"
                        },
                        new
                        {
                            TrainingTypeId = 5,
                            Name = "Basövning"
                        },
                        new
                        {
                            TrainingTypeId = 6,
                            Name = "Isolationsträning"
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GoalWeight")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Age = 35,
                            Email = "Kalles@mail.com",
                            Gender = 0,
                            Goal = "Bli DunderBiff",
                            GoalWeight = 80,
                            Height = 176,
                            Name = "Kalle",
                            PasswordHash = "123",
                            Phone = "123123",
                            Weight = 70
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.UserTool", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ToolId");

                    b.HasIndex("ToolId");

                    b.ToTable("UserTool");
                });

            modelBuilder.Entity("Training_app_API.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueId"), 1L, 1);

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            VenueId = 1,
                            Name = "Gym"
                        },
                        new
                        {
                            VenueId = 2,
                            Name = "Hemma"
                        },
                        new
                        {
                            VenueId = 3,
                            Name = "Utomhus"
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkoutDiaryId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutId");

                    b.HasIndex("WorkoutDiaryId");

                    b.ToTable("Workout");

                    b.HasData(
                        new
                        {
                            WorkoutId = 1,
                            Comment = "Bra jobbat!",
                            Date = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkoutDiaryId = 1
                        },
                        new
                        {
                            WorkoutId = 2,
                            Comment = ":D!",
                            Date = new DateTime(2021, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkoutDiaryId = 1
                        },
                        new
                        {
                            WorkoutId = 3,
                            Comment = "Good!",
                            Date = new DateTime(2021, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkoutDiaryId = 1
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.WorkoutDiary", b =>
                {
                    b.Property<int>("WorkoutDiaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutDiaryId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutDiaryId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("WorkoutDiary");

                    b.HasData(
                        new
                        {
                            WorkoutDiaryId = 1,
                            Date = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.WorkoutExercise", b =>
                {
                    b.Property<int>("WorkoutExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutExerciseId"), 1L, 1);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutExerciseId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutExercise");

                    b.HasData(
                        new
                        {
                            WorkoutExerciseId = 1,
                            ExerciseId = 1,
                            Reps = 10,
                            Sets = 3,
                            WorkoutId = 1
                        },
                        new
                        {
                            WorkoutExerciseId = 2,
                            ExerciseId = 2,
                            Reps = 10,
                            Sets = 3,
                            WorkoutId = 2
                        },
                        new
                        {
                            WorkoutExerciseId = 3,
                            ExerciseId = 3,
                            Reps = 10,
                            Sets = 3,
                            WorkoutId = 3
                        });
                });

            modelBuilder.Entity("Training_app_API.Models.ExerciseMuscleGroup", b =>
                {
                    b.HasOne("Training_app_API.Models.Exercise", "Exercise")
                        .WithMany("ExerciseMuscleGroups")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training_app_API.Models.MuscleGroup", "MuscleGroup")
                        .WithMany("ExerciseMuscleGroups")
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("Training_app_API.Models.ExerciseTool", b =>
                {
                    b.HasOne("Training_app_API.Models.Exercise", "Exercise")
                        .WithMany("ExerciseTools")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training_app_API.Models.Tool", "Tool")
                        .WithMany("ExerciseTools")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("Training_app_API.Models.ExerciseTrainingType", b =>
                {
                    b.HasOne("Training_app_API.Models.Exercise", "Exercise")
                        .WithMany("ExerciseTrainingTypes")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training_app_API.Models.TrainingType", "TrainingType")
                        .WithMany("ExerciseTrainingTypes")
                        .HasForeignKey("TrainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("TrainingType");
                });

            modelBuilder.Entity("Training_app_API.Models.ExerciseVenue", b =>
                {
                    b.HasOne("Training_app_API.Models.Exercise", "Exercise")
                        .WithMany("ExerciseVenues")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training_app_API.Models.Venue", "Venue")
                        .WithMany("ExerciseVenues")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Training_app_API.Models.MuscleGroup", b =>
                {
                    b.HasOne("Training_app_API.Models.Exercise", null)
                        .WithMany("MuscleGroups")
                        .HasForeignKey("ExerciseId");
                });

            modelBuilder.Entity("Training_app_API.Models.Tool", b =>
                {
                    b.HasOne("Training_app_API.Models.Exercise", null)
                        .WithMany("Tools")
                        .HasForeignKey("ExerciseId");

                    b.HasOne("Training_app_API.Models.User", null)
                        .WithMany("Tools")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Training_app_API.Models.TrainingType", b =>
                {
                    b.HasOne("Training_app_API.Models.Exercise", null)
                        .WithMany("TrainingTypes")
                        .HasForeignKey("ExerciseId");
                });

            modelBuilder.Entity("Training_app_API.Models.UserTool", b =>
                {
                    b.HasOne("Training_app_API.Models.Tool", "Tool")
                        .WithMany("UserTools")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training_app_API.Models.User", "User")
                        .WithMany("UserTools")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Training_app_API.Models.Venue", b =>
                {
                    b.HasOne("Training_app_API.Models.Exercise", null)
                        .WithMany("Venues")
                        .HasForeignKey("ExerciseId");
                });

            modelBuilder.Entity("Training_app_API.Models.Workout", b =>
                {
                    b.HasOne("Training_app_API.Models.WorkoutDiary", "WorkoutDiary")
                        .WithMany("Workouts")
                        .HasForeignKey("WorkoutDiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutDiary");
                });

            modelBuilder.Entity("Training_app_API.Models.WorkoutDiary", b =>
                {
                    b.HasOne("Training_app_API.Models.User", null)
                        .WithOne("WorkoutDiary")
                        .HasForeignKey("Training_app_API.Models.WorkoutDiary", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Training_app_API.Models.WorkoutExercise", b =>
                {
                    b.HasOne("Training_app_API.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training_app_API.Models.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Training_app_API.Models.Exercise", b =>
                {
                    b.Navigation("ExerciseMuscleGroups");

                    b.Navigation("ExerciseTools");

                    b.Navigation("ExerciseTrainingTypes");

                    b.Navigation("ExerciseVenues");

                    b.Navigation("MuscleGroups");

                    b.Navigation("Tools");

                    b.Navigation("TrainingTypes");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("Training_app_API.Models.MuscleGroup", b =>
                {
                    b.Navigation("ExerciseMuscleGroups");
                });

            modelBuilder.Entity("Training_app_API.Models.Tool", b =>
                {
                    b.Navigation("ExerciseTools");

                    b.Navigation("UserTools");
                });

            modelBuilder.Entity("Training_app_API.Models.TrainingType", b =>
                {
                    b.Navigation("ExerciseTrainingTypes");
                });

            modelBuilder.Entity("Training_app_API.Models.User", b =>
                {
                    b.Navigation("Tools");

                    b.Navigation("UserTools");

                    b.Navigation("WorkoutDiary");
                });

            modelBuilder.Entity("Training_app_API.Models.Venue", b =>
                {
                    b.Navigation("ExerciseVenues");
                });

            modelBuilder.Entity("Training_app_API.Models.Workout", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("Training_app_API.Models.WorkoutDiary", b =>
                {
                    b.Navigation("Workouts");
                });
#pragma warning restore 612, 618
        }
    }
}
